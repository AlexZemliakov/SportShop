use crate::telegram_notifications::TelegramNotifier;
use crate::ton_payment::TonProcessor;
use teloxide::prelude::*;
use teloxide::types::{CallbackQuery, Message, Update};
use teloxide::utils::command::BotCommands;
use std::sync::Arc;
use std::error::Error;

pub struct TelegramBot {
    bot: Bot,
    notifier: Arc<TelegramNotifier>,
    ton_processor: Arc<TonProcessor>,
}

impl TelegramBot {
    pub fn new(bot_token: String, notifier: Arc<TelegramNotifier>, ton_processor: Arc<TonProcessor>) -> Self {
        Self {
            bot: Bot::new(bot_token),
            notifier,
            ton_processor,
        }
    }

    pub async fn start(self) {
        let handler = dptree::entry()
            .branch(
                Update::filter_message()
                    .branch(
                        dptree::filter(|msg: Message| msg.text().is_some())
                            .filter_command::<Command>()
                            .endpoint(Self::command_handler)
                    )
                    .branch(
                        dptree::filter(|msg: Message| msg.text().is_some())
                            .endpoint(Self::message_handler)
                    )
            )
            .branch(
                Update::filter_callback_query()
                    .endpoint(Self::callback_handler),
            );

        let bot_instance = Arc::new(self);
        let bot = bot_instance.bot.clone();

        Dispatcher::builder(bot, handler)
            .dependencies(dptree::deps![bot_instance])
            .build()
            .dispatch()
            .await;
    }

    async fn command_handler(
        bot: Bot,
        msg: Message,
        cmd: Command,
        _bot_instance: Arc<Self>,
    ) -> Result<(), Box<dyn Error + Send + Sync>> {
        match cmd {
            Command::Start => {
                bot.send_message(msg.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SportShop! üèÉ‚Äç‚ôÇÔ∏è\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ WebApp –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤.")
                    .await?;
            }
            Command::Help => {
                bot.send_message(msg.chat.id, Command::descriptions().to_string())
                    .await?;
            }
        }
        Ok(())
    }

    async fn message_handler(
        bot: Bot,
        msg: Message,
        bot_instance: Arc<Self>,
    ) -> Result<(), Box<dyn Error + Send + Sync>> {
        if let Some(text) = msg.text() {
            let user_id = msg.from.as_ref().map(|user| user.id.0 as i64).unwrap_or(0);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if let Ok(is_active) = bot_instance.notifier.is_dialog_active(user_id).await {
                if is_active {
                    // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                    if let Err(e) = bot_instance.notifier.forward_user_message_to_admin(user_id, text).await {
                        eprintln!("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {:?}", e);
                    }
                } else {
                    // –î–∏–∞–ª–æ–≥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω - —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    bot.send_message(
                        msg.chat.id,
                        "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤. –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ WebApp –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
                    ).await?;
                }
            }
        }
        Ok(())
    }

    async fn callback_handler(
        bot: Bot,
        q: CallbackQuery,
        bot_instance: Arc<Self>,
    ) -> Result<(), Box<dyn Error + Send + Sync>> {
        if let Some(data) = &q.data {
            let user_id = q.from.id.0 as i64;

            if data.starts_with("pay_") {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏—Ç—å"
                if let Ok(order_id) = data[4..].parse::<i64>() {
                    if let Err(e) = bot_instance.notifier.handle_payment_request(order_id, user_id).await {
                        eprintln!("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {:?}", e);
                        bot.answer_callback_query(q.id)
                            .text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
                            .await?;
                    } else {
                        bot.answer_callback_query(q.id)
                            .text("–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                            .await?;
                    }
                }
            } else if data.starts_with("complete_") {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
                if let Ok(order_id) = data[9..].parse::<i64>() {
                    if let Some(message) = &q.message {
                        if let Err(e) = bot_instance.notifier.handle_order_completion(order_id, message.id()).await {
                            eprintln!("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {:?}", e);
                            bot.answer_callback_query(q.id)
                                .text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
                                .await?;
                        } else {
                            bot.answer_callback_query(q.id)
                                .text("–ó–∞–∫–∞–∑ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π")
                                .await?;
                        }
                    }
                }
            }
        }
        Ok(())
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã TON (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑–≤–Ω–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞)
    pub async fn handle_payment_confirmation(&self, order_id: i64, username: Option<&str>) -> Result<(), Box<dyn Error + Send + Sync>> {
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
        if let Err(e) = self.notifier.notify_admin_new_order(order_id, username).await {
            eprintln!("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {:?}", e);
        }
        Ok(())
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ –∫–∞–Ω–∞–ª–µ)
    pub async fn handle_admin_comment(&self, order_id: i64, comment_text: &str) -> Result<(), Box<dyn Error + Send + Sync>> {
        if let Err(e) = self.notifier.forward_admin_comment_to_user(order_id, comment_text).await {
            eprintln!("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {:?}", e);
        }
        Ok(())
    }
}

#[derive(BotCommands, Clone)]
#[command(rename_rule = "lowercase", description = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")]
enum Command {
    #[command(description = "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")]
    Start,
    #[command(description = "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")]
    Help,
}