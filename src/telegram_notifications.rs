use crate::models::{Order, Payment};
use sqlx::SqlitePool;
use teloxide::prelude::*;
use teloxide::types::{ChatId, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode, MessageId};
use thiserror::Error;
use reqwest::Url;

#[derive(Error, Debug)]
pub enum NotificationError {
    #[error("Telegram API error: {0}")]
    TelegramError(#[from] teloxide::RequestError),
    #[error("Database error: {0}")]
    DbError(#[from] sqlx::Error),
    #[error("Parse error: {0}")]
    ParseError(String),
}

#[derive(Debug)]
pub struct CartItemData {
    pub product_id: i64,
    pub quantity: i32,
    pub name: String,
    pub price: f64,
}

pub struct TelegramNotifier {
    bot: Bot,
    admin_chat_id: i64,
    pub db_pool: SqlitePool,
    payment_wallet: String,
}

impl TelegramNotifier {
    pub fn new(bot_token: String, admin_chat_id: i64, db_pool: SqlitePool) -> Self {
        Self {
            bot: Bot::new(bot_token),
            admin_chat_id,
            db_pool,
            payment_wallet: "UQCbShhQNTKUd3GvKJsBxeiwLHuJghq9r7FQrkC5mSOfLXgy".to_string(),
        }
    }

    // 1. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
    pub async fn send_order_confirmation(
        &self,
        order_id: i64,
        user_id: i64,
        cart_items: &[CartItemData],
        delivery_address: &str,
        total_amount: f64,
        _username: Option<&str>,
    ) -> Result<(), NotificationError> {
        let mut order_text = "üõí *–í–∞—à –∑–∞–∫–∞–∑*:\n".to_string();
        
        for item in cart_items {
            order_text.push_str(&format!("- {} (√ó{})\n", item.name, item.quantity));
        }
        
        order_text.push_str(&format!(
            "üì¶ *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏*: {}\nüí∞ *–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ*: {:.2} TON",
            delivery_address, total_amount
        ));

        let keyboard = InlineKeyboardMarkup::new(vec![vec![
            InlineKeyboardButton::callback("–û–ø–ª–∞—Ç–∏—Ç—å", format!("pay_{}", order_id))
        ]]);

        let message = self.bot
            .send_message(ChatId(user_id), order_text)
            .parse_mode(ParseMode::Markdown)
            .reply_markup(keyboard)
            .send()
            .await?;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        sqlx::query!(
            "UPDATE orders SET telegram_message_id = ?, dialog_active = TRUE WHERE id = ?",
            message.id.0,
            order_id
        )
        .execute(&self.db_pool)
        .await?;

        Ok(())
    }

    // 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏—Ç—å" - —Å–æ–∑–¥–∞–Ω–∏–µ TON –ø–ª–∞—Ç–µ–∂–∞
    pub async fn handle_payment_request(&self, order_id: i64, user_id: i64) -> Result<(), NotificationError> {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        let order = sqlx::query!(
            "SELECT total_amount FROM orders WHERE id = ? AND user_id = ?",
            order_id,
            user_id
        )
        .fetch_one(&self.db_pool)
        .await?;

        // –°–æ–∑–¥–∞–µ–º TON –ø–ª–∞—Ç–µ–∂ (–∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TON)
        let payment_url = format!(
            "ton://transfer/{}?amount={}&text=Order_{}",
            self.payment_wallet,
            (order.total_amount * 1_000_000_000.0) as i64, // Convert to nanotons
            order_id
        );

        let keyboard = InlineKeyboardMarkup::new(vec![vec![
            InlineKeyboardButton::url("–û–ø–ª–∞—Ç–∏—Ç—å –≤ TON", Url::parse(&payment_url).unwrap())
        ]]);

        self.bot
            .send_message(
                ChatId(user_id),
                format!("üí≥ *–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ{}*\n\n–°—É–º–º–∞: {:.2} TON\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", order_id, order.total_amount)
            )
            .parse_mode(ParseMode::Markdown)
            .reply_markup(keyboard)
            .send()
            .await?;

        Ok(())
    }

    // 3. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
    pub async fn notify_admin_new_order(&self, order_id: i64, username: Option<&str>) -> Result<MessageId, NotificationError> {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        let order = sqlx::query!(
            "SELECT o.id, o.user_id, o.total_amount, o.delivery_address, o.created_at 
             FROM orders o WHERE o.id = ?",
            order_id
        )
        .fetch_one(&self.db_pool)
        .await?;

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
        let order_items = sqlx::query!(
            "SELECT oi.quantity, p.name 
             FROM order_items oi 
             JOIN products p ON oi.product_id = p.id 
             WHERE oi.order_id = ?",
            order_id
        )
        .fetch_all(&self.db_pool)
        .await?;

        let mut message_text = format!(
            "üöÄ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑* (ID: {})\nüë§ *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å*: {}\nüì¶ *–ê–¥—Ä–µ—Å*: {}\nüõí *–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞*:\n",
            order.id,
            username.map(|u| format!("@{}", u)).unwrap_or_else(|| format!("ID: {}", order.user_id)),
            order.delivery_address.unwrap_or_else(|| "–ù–µ —É–∫–∞–∑–∞–Ω".to_string())
        );

        for item in order_items {
            message_text.push_str(&format!("- {} (√ó{})\n", item.name, item.quantity));
        }

        message_text.push_str(&format!("üí∞ *–û–ø–ª–∞—á–µ–Ω–æ*: {:.2} TON", order.total_amount));

        let keyboard = InlineKeyboardMarkup::new(vec![vec![
            InlineKeyboardButton::callback("–í—ã–ø–æ–ª–Ω–µ–Ω–æ", format!("complete_{}", order_id))
        ]]);

        let message = self.bot
            .send_message(ChatId(self.admin_chat_id), message_text)
            .parse_mode(ParseMode::Markdown)
            .reply_markup(keyboard)
            .send()
            .await?;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Å–≤—è–∑–∏ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
        sqlx::query!(
            "UPDATE orders SET status = 'paid' WHERE id = ?",
            order_id
        )
        .execute(&self.db_pool)
        .await?;

        Ok(message.id)
    }

    // 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"
    pub async fn handle_order_completion(&self, order_id: i64, message_id: MessageId) -> Result<(), NotificationError> {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        let order = sqlx::query!(
            "SELECT user_id, dialog_active FROM orders WHERE id = ?",
            order_id
        )
        .fetch_one(&self.db_pool)
        .await?;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
        sqlx::query!(
            "UPDATE orders SET status = 'completed', dialog_active = FALSE WHERE id = ?",
            order_id
        )
        .execute(&self.db_pool)
        .await?;

        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ - —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
        if let Err(e) = self.bot
            .edit_message_reply_markup(ChatId(self.admin_chat_id), message_id)
            .reply_markup(InlineKeyboardMarkup::new(Vec::<Vec<InlineKeyboardButton>>::new()))
            .send()
            .await {
            eprintln!("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {:?}", e);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        self.bot
            .send_message(
                ChatId(order.user_id),
                "‚úÖ *–í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!*\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç."
            )
            .parse_mode(ParseMode::Markdown)
            .send()
            .await?;

        Ok(())
    }

    // 5. –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    pub async fn forward_admin_comment_to_user(&self, order_id: i64, comment_text: &str) -> Result<(), NotificationError> {
        let order = sqlx::query!(
            "SELECT user_id, dialog_active FROM orders WHERE id = ?",
            order_id
        )
        .fetch_one(&self.db_pool)
        .await?;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –¥–∏–∞–ª–æ–≥
        if !order.dialog_active.unwrap_or(false) {
            return Ok(()); // –î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç, –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º
        }

        self.bot
            .send_message(
                ChatId(order.user_id),
                format!("üì¢ *–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏*:\n{}", comment_text)
            )
            .parse_mode(ParseMode::Markdown)
            .send()
            .await?;

        Ok(())
    }

    // 6. –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –∫–∞–Ω–∞–ª
    pub async fn forward_user_message_to_admin(&self, user_id: i64, message_text: &str) -> Result<(), NotificationError> {
        // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let order = sqlx::query!(
            "SELECT id FROM orders WHERE user_id = ? AND dialog_active = TRUE ORDER BY created_at DESC LIMIT 1",
            user_id
        )
        .fetch_optional(&self.db_pool)
        .await?;

        if let Some(order) = order {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –∫–∞–Ω–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            self.bot
                .send_message(
                    ChatId(self.admin_chat_id),
                    format!("üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* (–ó–∞–∫–∞–∑ #{}):\n{}", order.id, message_text)
                )
                .parse_mode(ParseMode::Markdown)
                .send()
                .await?;
        }

        Ok(())
    }

    // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥–∞
    pub async fn is_dialog_active(&self, user_id: i64) -> Result<bool, NotificationError> {
        let result = sqlx::query!(
            "SELECT COUNT(*) as count FROM orders WHERE user_id = ? AND dialog_active = TRUE",
            user_id
        )
        .fetch_one(&self.db_pool)
        .await?;

        Ok(result.count > 0)
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...
    pub async fn notify_new_order(&self, _order: &Order) -> Result<(), NotificationError> {
        // Deprecated - use send_order_confirmation instead
        Ok(())
    }

    pub async fn notify_payment_received(&self, payment: &Payment) -> Result<(), NotificationError> {
        if let Ok(order_id) = payment.order_id.parse::<i64>() {
            self.notify_admin_new_order(order_id, None).await?;
        }
        Ok(())
    }

    pub async fn notify_order_completed(
        &self,
        _order_id: i64,
        _admin_comment: Option<String>,
    ) -> Result<(), NotificationError> {
        // Deprecated - use handle_order_completion instead
        Ok(())
    }

    pub async fn notify_user_with_payment(
        &self,
        _order_id: i64
    ) -> Result<(), NotificationError> {
        // Deprecated - use send_order_confirmation instead
        Ok(())
    }
}