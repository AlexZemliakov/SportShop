// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    loadCategoriesForSelect();
    loadProducts();
    loadCategories();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    document.getElementById('saveProductBtn').addEventListener('click', saveProduct);
    document.getElementById('cancelEditBtn').addEventListener('click', resetProductForm);
    document.getElementById('saveCategoryBtn').addEventListener('click', saveCategory);
    document.getElementById('cancelEditCategoryBtn').addEventListener('click', resetCategoryForm);
    document.getElementById('productCategoryFilter').addEventListener('change', filterProductsByCategory);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('.admin-tab').forEach(tab => {
        tab.addEventListener('click', switchTab);
    });
});

// ========== –û–ë–©–ò–ï –§–£–ù–ö–¶–ò–ò ==========

function showSuccess(message) {
    const toast = document.createElement('div');
    toast.className = 'toast success';
    toast.textContent = message;
    document.body.appendChild(toast);
    setTimeout(() => toast.remove(), 3000);
}

function showError(message) {
    const toast = document.createElement('div');
    toast.className = 'toast error';
    toast.textContent = message;
    document.body.appendChild(toast);
    setTimeout(() => toast.remove(), 3000);
}

// ========== –†–ê–ë–û–¢–ê –° –í–ö–õ–ê–î–ö–ê–ú–ò ==========

function switchTab(event) {
    const tab = event.currentTarget;
    document.querySelectorAll('.admin-tab').forEach(t => t.classList.remove('active'));
    document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));

    tab.classList.add('active');
    document.getElementById(`${tab.dataset.tab}Tab`).classList.add('active');

    if (tab.dataset.tab === 'categories') {
        loadCategories();
    } else {
        loadProducts();
    }
}

// ========== –†–ê–ë–û–¢–ê –° –¢–û–í–ê–†–ê–ú–ò ==========

async function loadProducts(categoryId = null) {
    try {
        const url = categoryId && categoryId !== 'all'
            ? `/api/categories/${categoryId}/products`
            : '/api/products';

        const response = await fetch(url);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        const products = await response.json();

        renderProductsTable(products);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤');
    }
}

function renderProductsTable(products) {
    const tbody = document.querySelector('#productsTable tbody');
    tbody.innerHTML = '';

    if (products.length === 0) {
        tbody.innerHTML = '<tr><td colspan="7" class="empty">–¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</td></tr>';
        return;
    }

    products.forEach(product => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${product.id}</td>
            <td>${product.name}</td>
            <td>${product.description || '-'}</td>
            <td>${product.price.toFixed(2)} ‚ÇΩ</td>
            <td>${product.stock}</td>
            <td>${getCategoryName(product.category_id)}</td>
            <td>
                <button class="btn btn-edit" onclick="editProduct(${product.id})">‚úèÔ∏è</button>
                <button class="btn btn-danger" onclick="deleteProduct(${product.id})">üóëÔ∏è</button>
            </td>
        `;
        tbody.appendChild(row);
    });
}

async function saveProduct() {
    const productId = document.getElementById('editProductId').value;
    const product = {
        name: document.getElementById('productName').value.trim(),
        description: document.getElementById('productDescription').value.trim(),
        price: parseFloat(document.getElementById('productPrice').value),
        stock: parseInt(document.getElementById('productStock').value),
        image_url: document.getElementById('productImage').value.trim() || null,
        category_id: document.getElementById('productCategory').value || null
    };

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!validateProduct(product)) return;

    try {
        const url = productId ? `/api/products/${productId}` : '/api/products';
        const method = productId ? 'PUT' : 'POST';

        const response = await fetch(url, {
            method: method,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(product)
        });

        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }

        resetProductForm();
        loadProducts(document.getElementById('productCategoryFilter').value);
        showSuccess(productId ? '–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω' : '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
        showError(error.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
    }
}

function resetProductForm() {
    document.getElementById('editProductId').value = '';
    document.getElementById('productName').value = '';
    document.getElementById('productDescription').value = '';
    document.getElementById('productPrice').value = '';
    document.getElementById('productStock').value = '';
    document.getElementById('productImage').value = '';
    document.getElementById('productCategory').value = '';
    document.getElementById('saveProductBtn').textContent = '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä';
    document.getElementById('cancelEditBtn').style.display = 'none';
}

async function editProduct(id) {
    try {
        const response = await fetch(`/api/products/${id}`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        const product = await response.json();

        document.getElementById('editProductId').value = product.id;
        document.getElementById('productName').value = product.name;
        document.getElementById('productDescription').value = product.description || '';
        document.getElementById('productPrice').value = product.price;
        document.getElementById('productStock').value = product.stock;
        document.getElementById('productImage').value = product.image_url || '';
        document.getElementById('productCategory').value = product.category_id || '';
        document.getElementById('saveProductBtn').textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
        document.getElementById('cancelEditBtn').style.display = 'inline-block';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞');
    }
}

async function deleteProduct(id) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?')) {
        try {
            const response = await fetch(`/api/products/${id}`, { method: 'DELETE' });
            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
            }
            loadProducts(document.getElementById('productCategoryFilter').value);
            showSuccess('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
            showError(error.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
        }
    }
}

function filterProductsByCategory() {
    const categoryId = document.getElementById('productCategoryFilter').value;
    loadProducts(categoryId === 'all' ? null : categoryId);
}

// ========== –†–ê–ë–û–¢–ê –° –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò ==========

async function loadCategoriesForSelect() {
    try {
        const response = await fetch('/api/categories');
        const categories = await response.json();

        const productCategorySelect = document.getElementById('productCategory');
        const filterCategorySelect = document.getElementById('productCategoryFilter');

        // –û—á–∏—â–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏
        productCategorySelect.innerHTML = '<option value="">–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>';
        filterCategorySelect.innerHTML = '<option value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>';

        categories.forEach(category => {
            const option = document.createElement('option');
            option.value = category.id;
            option.textContent = category.name;
            productCategorySelect.appendChild(option.cloneNode(true));
            filterCategorySelect.appendChild(option);
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    }
}

async function loadCategories() {
    try {
        const response = await fetch('/api/categories');
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        const categories = await response.json();

        renderCategoriesTable(categories);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
    }
}

function renderCategoriesTable(categories) {
    const tbody = document.querySelector('#categoriesTable tbody');
    tbody.innerHTML = '';

    if (categories.length === 0) {
        tbody.innerHTML = '<tr><td colspan="4" class="empty">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</td></tr>';
        return;
    }

    categories.forEach(category => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${category.id}</td>
            <td>${category.name}</td>
            <td>${category.description || '-'}</td>
            <td>
                <button class="btn btn-edit" onclick="editCategory(${category.id})">‚úèÔ∏è</button>
                <button class="btn btn-danger" onclick="deleteCategory(${category.id})">üóëÔ∏è</button>
            </td>
        `;
        tbody.appendChild(row);
    });
}

async function saveCategory() {
    const categoryId = document.getElementById('editCategoryId').value;
    const category = {
        name: document.getElementById('categoryName').value.trim(),
        description: document.getElementById('categoryDescription').value.trim() || null,
        image_url: document.getElementById('categoryImage').value.trim() || null
    };

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!category.name) {
        showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
        return;
    }

    const url = categoryId ? `/api/categories/${categoryId}` : '/api/categories';
    const method = categoryId ? 'PUT' : 'POST';

    try {
        const response = await fetch(url, {
            method: method,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(category)
        });

        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }

        resetCategoryForm();
        loadCategories();
        loadCategoriesForSelect();
        showSuccess(categoryId ? '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞' : '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
        showError(error.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    }
}

function resetCategoryForm() {
    document.getElementById('editCategoryId').value = '';
    document.getElementById('categoryName').value = '';
    document.getElementById('categoryDescription').value = '';
    document.getElementById('categoryImage').value = '';
    document.getElementById('saveCategoryBtn').textContent = '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é';
    document.getElementById('cancelEditCategoryBtn').style.display = 'none';
}

async function editCategory(id) {
    try {
        const response = await fetch(`/api/categories/${id}`);
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        const category = await response.json();

        document.getElementById('editCategoryId').value = category.id;
        document.getElementById('categoryName').value = category.name;
        document.getElementById('categoryDescription').value = category.description || '';
        document.getElementById('categoryImage').value = category.image_url || '';
        document.getElementById('saveCategoryBtn').textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
        document.getElementById('cancelEditCategoryBtn').style.display = 'inline-block';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    }
}

async function deleteCategory(id) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é?')) {
        try {
            const response = await fetch(`/api/categories/${id}`, { method: 'DELETE' });
            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
            }
            loadCategories();
            loadCategoriesForSelect();
            showSuccess('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
            showError(error.message || '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —Ç–æ–≤–∞—Ä–∞–º–∏');
        }
    }
}

// ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

function validateProduct(product) {
    if (!product.name || !product.description) {
        showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
        return false;
    }

    if (isNaN(product.price) || product.price <= 0) {
        showError('–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
        return false;
    }

    if (isNaN(product.stock) || product.stock < 0) {
        showError('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
        return false;
    }

    return true;
}

function getCategoryName(categoryId) {
    if (!categoryId) return '-';
    const select = document.getElementById('productCategory');
    const option = select.querySelector(`option[value="${categoryId}"]`);
    return option ? option.textContent : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}